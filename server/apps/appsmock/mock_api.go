// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/apps (interfaces: API)

// Package appsmock is a generated GoMock package.
package appsmock

import (
	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/server/apps"
	md "github.com/mattermost/mattermost-plugin-apps/server/utils/md"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockAPI) Call(arg0 *apps.Call) (*apps.CallResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(*apps.CallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockAPIMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockAPI)(nil).Call), arg0)
}

// GetApp mocks base method
func (m *MockAPI) GetApp(arg0 apps.AppID) (*apps.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockAPIMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAPI)(nil).GetApp), arg0)
}

// GetBindings mocks base method
func (m *MockAPI) GetBindings(arg0 *apps.Context) ([]*apps.Binding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindings", arg0)
	ret0, _ := ret[0].([]*apps.Binding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindings indicates an expected call of GetBindings
func (mr *MockAPIMockRecorder) GetBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindings", reflect.TypeOf((*MockAPI)(nil).GetBindings), arg0)
}

// InstallApp mocks base method
func (m *MockAPI) InstallApp(arg0 *apps.Context, arg1 apps.SessionToken, arg2 *apps.InInstallApp) (*apps.App, md.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(md.MD)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstallApp indicates an expected call of InstallApp
func (mr *MockAPIMockRecorder) InstallApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallApp", reflect.TypeOf((*MockAPI)(nil).InstallApp), arg0, arg1, arg2)
}

// KVDelete mocks base method
func (m *MockAPI) KVDelete(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockAPIMockRecorder) KVDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockAPI)(nil).KVDelete), arg0, arg1, arg2)
}

// KVGet mocks base method
func (m *MockAPI) KVGet(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVGet indicates an expected call of KVGet
func (mr *MockAPIMockRecorder) KVGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockAPI)(nil).KVGet), arg0, arg1, arg2, arg3)
}

// KVSet mocks base method
func (m *MockAPI) KVSet(arg0, arg1, arg2 string, arg3 interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVSet indicates an expected call of KVSet
func (mr *MockAPIMockRecorder) KVSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockAPI)(nil).KVSet), arg0, arg1, arg2, arg3)
}

// ListApps mocks base method
func (m *MockAPI) ListApps() []*apps.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps")
	ret0, _ := ret[0].([]*apps.App)
	return ret0
}

// ListApps indicates an expected call of ListApps
func (mr *MockAPIMockRecorder) ListApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockAPI)(nil).ListApps))
}

// Notify mocks base method
func (m *MockAPI) Notify(arg0 *apps.Context, arg1 apps.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockAPIMockRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockAPI)(nil).Notify), arg0, arg1)
}

// ProvisionApp mocks base method
func (m *MockAPI) ProvisionApp(arg0 *apps.Context, arg1 apps.SessionToken, arg2 *apps.InProvisionApp) (*apps.App, md.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(md.MD)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProvisionApp indicates an expected call of ProvisionApp
func (mr *MockAPIMockRecorder) ProvisionApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionApp", reflect.TypeOf((*MockAPI)(nil).ProvisionApp), arg0, arg1, arg2)
}

// StoreApp mocks base method
func (m *MockAPI) StoreApp(arg0 *apps.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreApp indicates an expected call of StoreApp
func (mr *MockAPIMockRecorder) StoreApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreApp", reflect.TypeOf((*MockAPI)(nil).StoreApp), arg0)
}

// Subscribe mocks base method
func (m *MockAPI) Subscribe(arg0 *apps.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockAPIMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAPI)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockAPI) Unsubscribe(arg0 *apps.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockAPIMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockAPI)(nil).Unsubscribe), arg0)
}
